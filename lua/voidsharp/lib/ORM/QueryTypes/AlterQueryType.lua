-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local VoidSharpORMAttributes
local VoidSharpORMQueryTypes
local VoidSharpORMSpecifiers
local ListAlterSpecifier
System.import(function (out)
  VoidSharpORMAttributes = VoidSharp.ORM.Attributes
  VoidSharpORMQueryTypes = VoidSharp.ORM.QueryTypes
  VoidSharpORMSpecifiers = VoidSharp.ORM.Specifiers
  ListAlterSpecifier = System.List(VoidSharpORMSpecifiers.AlterSpecifier)
end)
System.namespace("VoidSharp.ORM.QueryTypes", function (namespace)
  namespace.class("AlterQueryType_1", function (namespace)
    return function (T)
      local AddColumn, GenerateQuery, Execute, class, __ctor__
      __ctor__ = function (this, database)
        VoidSharpORMQueryTypes.QueryType.__ctor__(this, database)
        this.AddColumns = ListAlterSpecifier()
      end
      AddColumn = function (this, name, dataType)
        local specifier = VoidSharpORMSpecifiers.AlterSpecifier(name, dataType)
        this.AddColumns:Add(specifier)

        return this
      end
      GenerateQuery = function (this, type)
        local tableName = VoidSharpORMAttributes.TableAttribute.GetAttributeTable(type)

        local stringBuilder = System.StringBuilder("ALTER TABLE " .. tableName .. " ")
        local columnStrings = ListString()

        for _, specifier in System.each(this.AddColumns) do
          columnStrings:Add("ADD COLUMN `" .. specifier:getName() .. "` " .. System.toString(specifier:getDataType()))
        end

        stringBuilder:Append(System.String.JoinEnumerable(", ", columnStrings) .. ";")
        return stringBuilder:ToString()
      end
      Execute = function (this)
        return System.async(function (async, this)
          local query = this:GenerateQuery(System.typeof(T))
          async:await(this.Database:Query(query, T))
        end, nil, this)
      end
      class = {
        base = function (out)
          return {
            out.VoidSharp.ORM.QueryTypes.QueryType
          }
        end,
        AddColumn = AddColumn,
        GenerateQuery = GenerateQuery,
        Execute = Execute,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "AddColumns", 0x1, System.List(out.VoidSharp.ORM.Specifiers.AlterSpecifier) }
            },
            methods = {
              { ".ctor", 0x106, nil, out.VoidSharp.ORM.Database },
              { "AddColumn", 0x286, AddColumn, System.String, System.String, class },
              { "Execute", 0x86, Execute, System.Task },
              { "GenerateQuery", 0x186, GenerateQuery, System.Type, System.String }
            },
            class = { 0x106, T }
          }
        end
      }
      return class
    end
  end)
end)
