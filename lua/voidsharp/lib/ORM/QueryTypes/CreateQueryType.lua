-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local DictStringString = System.Dictionary(System.String, System.String)
local VoidSharp
local VoidSharpORMAttributes
local VoidSharpORMQueryTypes
System.import(function (out)
  VoidSharp = out.VoidSharp
  VoidSharpORMAttributes = VoidSharp.ORM.Attributes
  VoidSharpORMQueryTypes = VoidSharp.ORM.QueryTypes
end)
System.namespace("VoidSharp.ORM.QueryTypes", function (namespace)
  namespace.class("CreateQueryType", function (namespace)
    local GenerateQuery, class, static, __ctor__
    static = function (this)
      local default = DictStringString()
      default:AddKeyValue("Int32", "INTEGER NOT NULL")
      default:AddKeyValue("String", "VARCHAR({0})")
      default:AddKeyValue("Boolean", "BOOLEAN")
      default:AddKeyValue("Nullable`1", "INTEGER")
      default:AddKeyValue("DateTime", "INTEGER")
      default:AddKeyValue("Color", "VARCHAR(25)")
      default:AddKeyValue("Job", "VARCHAR(100)")
      default:AddKeyValue("Player", "VARCHAR(50)")
      default:AddKeyValue("Object", "TEXT")
      default:AddKeyValue("AccessoryModelBlacklist", "TEXT")
      default:AddKeyValue("AccessorySlots", "TEXT")
      default:AddKeyValue("ItemPrices", "TEXT")
      this.CSharpTypesToSqlTypesDictionary = default
    end
    __ctor__ = function (this, database)
      VoidSharpORMQueryTypes.QueryType.__ctor__(this, database)
    end
    GenerateQuery = function (this, type)
      local tableName = VoidSharpORMAttributes.TableAttribute.GetAttributeTable(type)

      local queryBuilder = System.StringBuilder("CREATE TABLE IF NOT EXISTS `" .. tableName .. "` (")

      local tableFields = ListString()
      local primaryKeys = ListString()

      local properties = type:GetProperties()
      for _, property in System.each(properties) do
        local propertyTypeName = property:getPropertyType():getName()
        local propertyName = property:getName()

        local sqlType = nil

        System.try(function ()
          sqlType = class.CSharpTypesToSqlTypesDictionary:get(propertyTypeName)
        end, function (default)
          System.throw(System.NotSupportedException("The C# type " .. propertyTypeName .. " is not supported for C# to SQL conversion."))
        end)

        local dataType = sqlType

        local columnLength = VoidSharpORMAttributes.ColumnLengthAttribute.GetAttributeColumnLength(property)
        if columnLength ~= nil or propertyTypeName == "String" then
          dataType = System.String.Format(dataType, columnLength or 50)
        end

        local isAutoIncrement = VoidSharpORMAttributes.AutoIncrementAttribute.IsAutoIncrement(property)
        if isAutoIncrement then
          if System.is(this.Database.DatabaseDriver, VoidSharp.MySQLoo) then
            dataType = dataType .. " AUTO_INCREMENT"
          end
        end

        local isPrimaryKey = VoidSharpORMAttributes.PrimaryKeyAttribute.IsPrimaryKey(property)
        if isPrimaryKey then
          -- Check if is SQLite/MySQL
          if System.is(this.Database.DatabaseDriver, VoidSharp.MySQLoo) then
            primaryKeys:Add(propertyName)
          elseif System.is(this.Database.DatabaseDriver, VoidSharp.SQLite) then
            dataType = dataType .. " PRIMARY KEY"
          end
        end

        tableFields:Add(propertyName .. " " .. dataType)
      end

      queryBuilder:Append(System.String.JoinEnumerable(", ", tableFields))
      if #primaryKeys > 0 then
        queryBuilder:Append(", PRIMARY KEY (")
        queryBuilder:Append(System.String.JoinEnumerable(", ", primaryKeys))
        queryBuilder:Append(")")
      end

      queryBuilder:Append(");")

      return queryBuilder:ToString()
    end
    class = {
      base = function (out)
        return {
          out.VoidSharp.ORM.QueryTypes.QueryType
        }
      end,
      GenerateQuery = GenerateQuery,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "CSharpTypesToSqlTypesDictionary", 0xE, System.Dictionary(System.String, System.String) }
          },
          methods = {
            { ".ctor", 0x106, nil, out.VoidSharp.ORM.Database },
            { "GenerateQuery", 0x186, GenerateQuery, System.Type, System.String }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)
