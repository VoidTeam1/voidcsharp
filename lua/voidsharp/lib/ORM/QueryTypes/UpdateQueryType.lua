-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local VoidSharpORM
local VoidSharpORMAttributes
local VoidSharpORMQueryTypes
local VoidSharpORMSpecifiers
local ListInsertSpecifier
System.import(function (out)
  VoidSharpORM = VoidSharp.ORM
  VoidSharpORMAttributes = VoidSharp.ORM.Attributes
  VoidSharpORMQueryTypes = VoidSharp.ORM.QueryTypes
  VoidSharpORMSpecifiers = VoidSharp.ORM.Specifiers
  ListInsertSpecifier = System.List(VoidSharpORMSpecifiers.InsertSpecifier)
end)
System.namespace("VoidSharp.ORM.QueryTypes", function (namespace)
  namespace.class("UpdateQueryType_1", function (namespace)
    return function (T)
      local Update, Update1, GenerateQuery, Execute, class, __ctor__
      __ctor__ = function (this, database)
        VoidSharpORMQueryTypes.QueryType.__ctor__(this, database)
        this.InsertSpecifiers = ListInsertSpecifier()
      end
      Update = function (this, column, value)
        local specifier = VoidSharpORMSpecifiers.InsertSpecifier(column, value)
        this.InsertSpecifiers:Add(specifier)

        return this
      end
      Update1 = function (this, obj)
        local properties = obj:GetType():GetProperties()
        for _, property in System.each(properties) do
          local propertyName = property:getName()
          local value = property:GetValue(obj)

          Update(this, propertyName, value)
        end

        return this
      end
      GenerateQuery = function (this, type)
        local tableName = VoidSharpORMAttributes.TableAttribute.GetAttributeTable(type)
        local stringBuilder = System.StringBuilder("UPDATE " .. tableName .. " SET ")

        local updateStatements = ListString()
        local primaryKeys = ListString()

        for _, specifier in System.each(this.InsertSpecifiers) do
          local propertyInfo = type:GetProperty(specifier:getKey())
          if propertyInfo == nil then
            System.throw(System.Exception("Tried to select a non-existing column!"))
          end

          local default, serializer = VoidSharpORM.SerializerMap.Serializers:TryGetValue(propertyInfo:getPropertyType())
          if not default then
            System.throw(System.Exception("VoidORM can't serialize the type " .. propertyInfo:getPropertyType():getName() .. "!"))
          end

          local strValue = serializer:Serialize(specifier:getValue(), this.Database.DatabaseDriver)

          local isPrimaryKey = VoidSharpORMAttributes.PrimaryKeyAttribute.IsPrimaryKey(propertyInfo)
          if isPrimaryKey then
            primaryKeys:Add("`" .. specifier:getKey() .. "` = " .. strValue)
          else
            updateStatements:Add("`" .. specifier:getKey() .. "` = " .. strValue)
          end
        end

        stringBuilder:Append(System.String.JoinEnumerable(", ", updateStatements))
        stringBuilder:Append(" WHERE " .. System.String.JoinEnumerable(" AND ", primaryKeys))
        stringBuilder:Append(";")

        return stringBuilder:ToString()
      end
      Execute = function (this)
        return System.async(function (async, this)
          local query = this:GenerateQuery(System.typeof(T))
          async:await(this.Database:Query(query, T))
        end, nil, this)
      end
      class = {
        base = function (out)
          return {
            out.VoidSharp.ORM.QueryTypes.QueryType
          }
        end,
        Update = Update,
        Update1 = Update1,
        GenerateQuery = GenerateQuery,
        Execute = Execute,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "InsertSpecifiers", 0x6, System.List(out.VoidSharp.ORM.Specifiers.InsertSpecifier) }
            },
            methods = {
              { ".ctor", 0x106, nil, out.VoidSharp.ORM.Database },
              { "Execute", 0x86, Execute, System.Task },
              { "GenerateQuery", 0x186, GenerateQuery, System.Type, System.String },
              { "Update", 0x286, Update, System.String, System.Object, class },
              { "Update", 0x186, Update1, System.Object, class }
            },
            class = { 0x106, T }
          }
        end
      }
      return class
    end
  end)
end)
