-- Generated by CSharp.lua Compiler
local System = System
local ListString = System.List(System.String)
local VoidSharpORM
local VoidSharpORMAttributes
local VoidSharpORMQueryTypes
local VoidSharpORMSpecifiers
local ListWhereSpecifier
System.import(function (out)
  VoidSharpORM = VoidSharp.ORM
  VoidSharpORMAttributes = VoidSharp.ORM.Attributes
  VoidSharpORMQueryTypes = VoidSharp.ORM.QueryTypes
  VoidSharpORMSpecifiers = VoidSharp.ORM.Specifiers
  ListWhereSpecifier = System.List(VoidSharpORMSpecifiers.WhereSpecifier)
end)
System.namespace("VoidSharp.ORM.QueryTypes", function (namespace)
  namespace.class("SelectQueryType_1", function (namespace)
    return function (T)
      local Select, Select1, Where, Where1, GenerateQuery, First, getSingle, ToList, 
      class, __ctor__
      __ctor__ = function (this, database)
        VoidSharpORMQueryTypes.QueryType.__ctor__(this, database)
        this.WhereSpecifiers = ListWhereSpecifier()
        this.Selects = ListString()
      end
      Select = function (this, column)
        this.Selects:Add(column)
        return this
      end
      Select1 = function (this, columns)
        for _, column in System.each(columns) do
          Select(this, column)
        end

        return this
      end
      Where = function (this, a, comparator, b)
        local specifier = VoidSharpORMSpecifiers.WhereSpecifier(a, comparator, b)
        this.WhereSpecifiers:Add(specifier)

        return this
      end
      Where1 = function (this, type, comparator, b)
        local obj = type(T(), T)
        System.Console.WriteLine(obj)
        local objType = obj:GetType()

        System.Console.WriteLine(objType)

        local propertyInfo = System.typeof(T):GetProperty(objType:getName())
        if propertyInfo == nil then
          System.throw(System.Exception(objType:getName() .. " is not a member of " .. System.typeof(T):getName() .. "!"))
        end

        Where(this, objType:getName(), comparator, b)

        return this
      end
      GenerateQuery = function (this, type)
        local tableName = VoidSharpORMAttributes.TableAttribute.GetAttributeTable(type)

        local stringBuilder = System.StringBuilder("SELECT")
        if #this.Selects > 0 then
          stringBuilder:Append(" ")
          stringBuilder:Append(System.String.JoinEnumerable(", ", this.Selects))
        else
          stringBuilder:Append(" *")
        end
        stringBuilder:Append(" FROM ")
        stringBuilder:Append(tableName)

        if #this.WhereSpecifiers > 0 then
          stringBuilder:Append(" WHERE ")

          local wheres = ListString()
          for _, specifier in System.each(this.WhereSpecifiers) do
            local propertyInfo = type:GetProperty(specifier:getKey())
            if propertyInfo == nil then
              System.throw(System.Exception("Tried to select a non-existing column!"))
            end

            local default, serializer = VoidSharpORM.SerializerMap.Serializers:TryGetValue(propertyInfo:getPropertyType())
            if not default then
              System.throw(System.Exception("VoidORM can't serialize the type " .. propertyInfo:getPropertyType():getName() .. "!"))
            end

            local strValue = serializer:Serialize(specifier:getValue(), this.Database.DatabaseDriver)

            wheres:Add("`" .. specifier:getKey() .. "` " .. specifier:getComparator() .. " " .. strValue)
          end

          stringBuilder:Append(System.String.JoinEnumerable(" AND ", wheres))
        end

        stringBuilder:Append(";")
        return stringBuilder:ToString()
      end
      First = function (this)
        return System.async(function (async, this)
          local query = this:GenerateQuery(System.typeof(T))
          local dbResult = async:await(this.Database:Query(query, T))
          local list = dbResult:ToList()
          local default
          if #list > 0 then
            default = list:get(0)
          else
            default = System.default(T)
          end
          return default
        end, nil, this)
      end
      getSingle = function (this)
        return First(this)
      end
      ToList = function (this)
        return System.async(function (async, this)
          local query = this:GenerateQuery(System.typeof(T))
          local dbResult = async:await(this.Database:Query(query, T))
          return dbResult:ToList()
        end, nil, this)
      end
      class = {
        base = function (out)
          return {
            out.VoidSharp.ORM.QueryTypes.QueryType
          }
        end,
        Select = Select,
        Select1 = Select1,
        Where = Where,
        Where1 = Where1,
        GenerateQuery = GenerateQuery,
        First = First,
        getSingle = getSingle,
        ToList = ToList,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "Selects", 0x1, System.List(System.String) },
              { "Single", 0x206, System.Task, getSingle },
              { "WhereSpecifiers", 0x6, System.List(out.VoidSharp.ORM.Specifiers.WhereSpecifier) }
            },
            methods = {
              { ".ctor", 0x106, nil, out.VoidSharp.ORM.Database },
              { "First", 0x86, First, System.Task },
              { "GenerateQuery", 0x186, GenerateQuery, System.Type, System.String },
              { "Select", 0x186, Select, System.String, class },
              { "Select", 0x186, Select1, System.Array(System.String), class },
              { "ToList", 0x86, ToList, System.Task },
              { "Where", 0x386, Where, System.String, System.String, System.Object, class },
              { "Where", 0x386, Where1, System.Delegate(T, System.Object), System.String, System.Object, class }
            },
            class = { 0x106, T }
          }
        end
      }
      return class
    end
  end)
end)
