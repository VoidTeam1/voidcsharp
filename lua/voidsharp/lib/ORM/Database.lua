-- Generated by CSharp.lua Compiler
local System = System
local SystemReflection = System.Reflection
local VoidSharp
local VoidSharpDarkRP
local VoidSharpORM
local VoidSharpORMAttributes
local VoidSharpORMQueryTypes
local VoidSharpORMSerializers
local VoidSharpUtilities
System.import(function (out)
  VoidSharp = out.VoidSharp
  VoidSharpDarkRP = VoidSharp.DarkRP
  VoidSharpORM = VoidSharp.ORM
  VoidSharpORMAttributes = VoidSharp.ORM.Attributes
  VoidSharpORMQueryTypes = VoidSharp.ORM.QueryTypes
  VoidSharpORMSerializers = VoidSharp.ORM.Serializers
  VoidSharpUtilities = VoidSharp.Utilities
end)
System.namespace("VoidSharp.ORM", function (namespace)
  namespace.class("Database", function (namespace)
    local Connect, AddSerializers, CreateTables, Query, Select, Update, Alter, Delete, 
    Insert, Drop, Replace, internal, __ctor1__, __ctor2__
    internal = function (this)
      this.DatabaseCredentials = System.default(VoidSharpORM.DatabaseCredentials)
    end
    __ctor1__ = function (this, databaseDriver)
      internal(this)
      this.DatabaseDriver = databaseDriver

      AddSerializers(this)
    end
    __ctor2__ = function (this, databaseDriver, databaseCredentials)
      internal(this)
      this.DatabaseDriver = databaseDriver
      this.DatabaseCredentials = databaseCredentials

      AddSerializers(this)
    end
    -- <summary>
    -- Connects to the database
    -- </summary>
    -- <exception cref="Exception">Thrown when the connection attempt is unsuccessful.</exception>
    Connect = function (this, entryPoint)
      return System.async(function (async, this, entryPoint)
        if System.is(this.DatabaseDriver, VoidSharp.MySQLoo) then
          local mySqloo = System.cast(VoidSharp.MySQLoo, this.DatabaseDriver)

          VoidSharpUtilities.Logger.LogInfo("Connecting to MySQL database...", "Database")
          local result = async:await(mySqloo:Connect(this.DatabaseCredentials))

          if result.HasFailed then
            System.throw(System.Exception("Couldn't connect to MySQL database! Error: " .. result.Error))
          end

          VoidSharpUtilities.Logger.LogInfo("Successfully connected to MySQL database!", "Database")
        elseif System.is(this.DatabaseDriver, VoidSharp.SQLite) then
          VoidSharpUtilities.Logger.LogInfo("Initialized local SQLite database instance!", "Database")
        end

        async:await(CreateTables(this, entryPoint))
      end, nil, this, entryPoint)
    end
    -- <summary>
    -- Adds all the serializers that translate the object into an SQL string.
    -- </summary>
    AddSerializers = function (this)
      VoidSharpORM.SerializerMap.RegisterSerializer(System.DateTime, VoidSharpORMSerializers.DateTimeSerializer)
      VoidSharpORM.SerializerMap.RegisterSerializer(System.String, VoidSharpORMSerializers.StringSerializer)
      VoidSharpORM.SerializerMap.RegisterSerializer(System.Int32, VoidSharpORMSerializers.IntegerSerializer)
      VoidSharpORM.SerializerMap.RegisterSerializer(VoidSharp.Color, VoidSharpORMSerializers.ColorSerializer)
      VoidSharpORM.SerializerMap.RegisterSerializer(System.Boolean, VoidSharpORMSerializers.BoolSerializer)
      VoidSharpORM.SerializerMap.RegisterSerializer(VoidSharpDarkRP.Job, VoidSharpORMSerializers.JobSerializer)
      VoidSharpORM.SerializerMap.RegisterSerializer(System.Object, VoidSharpORMSerializers.DynamicSerializer)
    end
    -- <summary>
    -- Creates all the tables from Models.
    -- </summary>
    CreateTables = function (this, entryPoint)
      return System.async(function (async, this, entryPoint)
        local createQueryType = VoidSharpORMQueryTypes.CreateQueryType(this)

        local assembly = SystemReflection.Assembly.GetAssembly(entryPoint)

        if assembly == nil then
          System.throw(System.Exception("Entry assembly not found. Could not find ORM models."))
        end

        for _, type in System.each(assembly:GetExportedTypes()) do
          if #type:GetCustomAttributes(System.typeof(VoidSharpORMAttributes.TableAttribute), true) > 0 then
            local query = createQueryType:GenerateQuery(type)
            local result = async:await(Query(this, query, System.Object))

            System.Console.WriteLine(result.Result)
          end
        end
      end, nil, this, entryPoint)
    end
    -- <summary>
    -- Performs an SQL query on the Database directly. This is used internally, but can be also used
    -- </summary>
    -- <param name="query">The SQL Query</param>
    -- <returns>DatabaseResult</returns>
    Query = function (this, query, T)
      return System.async(function (async, this, query, T)
        local data = async:await(this.DatabaseDriver:Query(query))
        return VoidSharpORM.DatabaseResult_1(T)(data)
      end, nil, this, query, T)
    end
    -- <summary>
    -- Selects rows from the Database.
    -- </summary>
    -- <typeparam name="T">Wanted class</typeparam>
    -- <returns>SelectQueryType</returns>
    Select = function (this, T)
      return VoidSharpORMQueryTypes.SelectQueryType_1(T)(this)
    end
    -- <summary>
    -- Updates one row in the database.
    -- </summary>
    -- <param name="obj">The changed object.</param>
    -- <returns>UpdateQueryType</returns>
    Update = function (this, obj, T)
      local updateQueryType = VoidSharpORMQueryTypes.UpdateQueryType_1(T)(this)
      return updateQueryType:Update1(obj)
    end
    -- <summary>
    -- Alters a database model - should be only used in migrations, nowhere else!
    -- </summary>
    Alter = function (this, T)
      return VoidSharpORMQueryTypes.AlterQueryType_1(T)(this)
    end
    -- <summary>
    -- Deletes row(s) from the database.
    -- </summary>
    Delete = function (this, T)
      return VoidSharpORMQueryTypes.DeleteQueryType_1(T)(this)
    end
    -- <summary>
    -- Inserts an object into the database.
    -- </summary>
    -- <param name="obj">The object to insert.</param>
    -- <typeparam name="T">The object class.</typeparam>
    -- <returns>InsertQueryType</returns>
    Insert = function (this, obj, T)
      local insertQueryType = VoidSharpORMQueryTypes.InsertQueryType_1(T)(this)
      return insertQueryType:Insert1(obj, false)
    end
    -- <summary>
    -- Drops a table from the database. Should be ONLY used in migrations.
    -- </summary>
    Drop = function (this, T)
      return VoidSharpORMQueryTypes.DropQueryType_1(T)(this)
    end
    -- <summary>
    -- Replaces an object if exists or inserts a new row. (based on primary key)
    -- </summary>
    Replace = function (this, obj, T)
      local insertQueryType = VoidSharpORMQueryTypes.InsertQueryType_1(T)(this)
      return insertQueryType:Replace(obj)
    end
    return {
      Connect = Connect,
      Query = Query,
      Select = Select,
      Update = Update,
      Alter = Alter,
      Delete = Delete,
      Insert = Insert,
      Drop = Drop,
      Replace = Replace,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          properties = {
            { "DatabaseCredentials", 0x1, out.VoidSharp.ORM.DatabaseCredentials },
            { "DatabaseDriver", 0x6, out.VoidSharp.IDatabaseDriver }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, out.VoidSharp.IDatabaseDriver },
            { ".ctor", 0x206, __ctor2__, out.VoidSharp.IDatabaseDriver, out.VoidSharp.ORM.DatabaseCredentials },
            { "AddSerializers", 0x1, AddSerializers },
            { "Alter", 0x10086, Alter, function (T) return out.VoidSharp.ORM.QueryTypes.AlterQueryType_1(T) end },
            { "Connect", 0x186, Connect, System.Type, System.Task },
            { "CreateTables", 0x181, CreateTables, System.Type, System.Task },
            { "Delete", 0x10086, Delete, function (T) return out.VoidSharp.ORM.QueryTypes.DeleteQueryType_1(T) end },
            { "Drop", 0x10086, Drop, function (T) return out.VoidSharp.ORM.QueryTypes.DropQueryType_1(T) end },
            { "Insert", 0x10186, Insert, function (T) return System.Object, out.VoidSharp.ORM.QueryTypes.InsertQueryType_1(T) end },
            { "Query", 0x10186, Query, function (T) return System.String, System.Task end },
            { "Replace", 0x10186, Replace, function (T) return System.Object, out.VoidSharp.ORM.QueryTypes.InsertQueryType_1(T) end },
            { "Select", 0x10086, Select, function (T) return out.VoidSharp.ORM.QueryTypes.SelectQueryType_1(T) end },
            { "Update", 0x10186, Update, function (T) return System.Object, out.VoidSharp.ORM.QueryTypes.UpdateQueryType_1(T) end }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
