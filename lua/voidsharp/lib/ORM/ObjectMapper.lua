-- Generated by CSharp.lua Compiler
local System = System
local Linq = System.Linq.Enumerable
local VoidSharpORM
System.import(function (out)
  VoidSharpORM = VoidSharp.ORM
end)
System.namespace("VoidSharp.ORM", function (namespace)
  namespace.class("ObjectMapper", function (namespace)
    local GetPropertyTypes, MapValue, AssignValues, __ctor__
    __ctor__ = function (this, o)
      this.Object = o
    end
    GetPropertyTypes = function (this)
      local properties = this.Object:GetType():GetProperties()
      return Linq.ToDictionary(Linq.Select(properties, function (x)
        return System.AnonymousType({
          String = x:getName(),
          Property = x:getPropertyType()
        })
      end, System.AnonymousType), function (x)
        return x.String
      end, function (v)
        return v.Property
      end, System.String, System.Type)
    end
    MapValue = function (this, property, value)
      local serializer = VoidSharpORM.SerializerMap.Serializers:get(property:getPropertyType())
      return serializer:Deserialize(value)
    end
    AssignValues = function (this, values)
      local properties = this.Object:GetType():GetProperties()
      for _, pair in System.each(values) do
        local property = Linq.FirstOrDefault(properties, function (x)
          return x:getName() == pair.Key
        end)
        if property == nil then
          System.throw(System.Exception("Object does not contain property with name " .. pair.Key .. "!"))
        end

        local value = MapValue(this, property, pair.Value)
        this.Object[pair.Key] = value
      end
    end
    return {
      GetPropertyTypes = GetPropertyTypes,
      AssignValues = AssignValues,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Object", 0x6, System.Object }
          },
          methods = {
            { ".ctor", 0x106, nil, System.Object },
            { "AssignValues", 0x106, AssignValues, System.Dictionary(System.String, System.Object) },
            { "GetPropertyTypes", 0x86, GetPropertyTypes, System.Dictionary(System.String, System.Type) },
            { "MapValue", 0x281, MapValue, System.Reflection.PropertyInfo, System.Object, System.Object }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
