-- Generated by CSharp.lua Compiler
local System = System
local VoidSharp
local VoidSharpHandlers
System.import(function (out)
  VoidSharp = out.VoidSharp
  VoidSharpHandlers = VoidSharp.Handlers
end)
System.namespace("VoidSharp.Handlers", function (namespace)
  namespace.class("HookHandler", function (namespace)
    local InitializeHooks
    -- <summary>
    -- Initializes hooks for usage in passed instance.
    -- </summary>
    -- <param name="instance">The instance of the class.</param>
    InitializeHooks = function (instance)
      local methods = VoidSharpHandlers.HookAttribute.GetAllHookAttributes(instance:GetType())
      for _, method in System.each(methods) do
        local hookAttribute = System.cast(VoidSharpHandlers.HookAttribute, method:GetCustomAttributes(System.typeof(VoidSharpHandlers.HookAttribute), true):get(0))

        local hookName = hookAttribute.HookName
        local hookId = hookAttribute.HookId

        VoidSharp.Hook.Add(hookName, hookId or hookName .. ".Listener." .. method:getName(), function (objects)
          method:Invoke(instance, objects)
        end)
      end
    end
    return {
      InitializeHooks = InitializeHooks,
      __metadata__ = function (out)
        return {
          methods = {
            { "InitializeHooks", 0x10E, InitializeHooks, System.Object }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
