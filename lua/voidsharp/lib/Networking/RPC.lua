-- Generated by CSharp.lua Compiler
-- ReSharper disable InconsistentNaming
local System = System
local Linq = System.Linq.Enumerable
local ListObject = System.List(System.Object)
local VoidSharp
local VoidSharpNetworking
System.import(function (out)
  VoidSharp = out.VoidSharp
  VoidSharpNetworking = VoidSharp.Networking
end)
System.namespace("VoidSharp.Networking", function (namespace)
  -- ReSharper disable once InconsistentNaming
  namespace.class("RPC", function (namespace)
    local ShouldReadAsSingle, RegisterInstance, AddNetworkString, WriteData, ClassFromObj, WriteSingle, Send, SendToClient, 
    SendToClients
    ShouldReadAsSingle = function (type)
      local isClass = type:getIsClass()
      local default, _ = VoidSharpNetworking.SerializerMap.Serializers:TryGetValue(type)
      local hasASerializer = default

      return not isClass or hasASerializer
    end
    RegisterInstance = function (instance)
      local methods = VoidSharpNetworking.RPCAttribute.GetAllRPCAttributes(instance:GetType())
      for _, method in System.each(methods) do
        local continueLoop
        repeat
          local attribute = System.cast(VoidSharpNetworking.RPCAttribute, Linq.SingleOrDefault(method:GetCustomAttributes(System.typeof(VoidSharpNetworking.RPCAttribute), false)))

          if attribute == nil then
            continueLoop = true
            break
          end

          local paramInfos = method:GetParameters()
          local attrTypes = Linq.ToList(Linq.Select(paramInfos, function (x)
            return x:getParameterType()
          end, System.Type))

          if VoidSharp.Realm.IsServer() then
            attrTypes:RemoveAt(0)
            -- Remove the player parameter

            VoidSharp.Net.Receive1("voidsharp_" .. method:getName(), function (i, gPlayer)
              System.Console.WriteLine(gPlayer:Nick())
              local player = VoidSharp.Player(gPlayer)
              System.Console.WriteLine(player:getNick())
              local serializer = VoidSharpNetworking.DataSerializer()

              local reader = VoidSharpNetworking.NetworkReader()
              local default = ListObject()
              default:Add(player)
              local objData = default
              for _, attrType in System.each(attrTypes) do
                local isClass = not ShouldReadAsSingle(attrType)
                local default
                if isClass then
                  default = serializer:Read(attrType)
                else
                  default = serializer:ReadSingle(reader, attrType)
                end
                objData:Add(default)
              end

              method:Invoke(instance, objData:ToArray())
            end)
          else
            VoidSharp.Net.Receive("voidsharp_" .. method:getName(), function (i)
              local serializer = VoidSharpNetworking.DataSerializer()

              local reader = VoidSharpNetworking.NetworkReader()
              local objData = ListObject()
              for _, attrType in System.each(attrTypes) do
                local isClass = not ShouldReadAsSingle(attrType)
                local default
                if isClass then
                  default = serializer:Read(attrType)
                else
                  default = serializer:ReadSingle(reader, attrType)
                end
                objData:Add(default)
              end

              method:Invoke(instance, objData:ToArray())
            end)
          end
          continueLoop = true
        until 1
        if not continueLoop then
          break
        end
      end
    end
    AddNetworkString = function (name)
      util.AddNetworkString("voidsharp_" .. name)
    end
    WriteData = function (T, TClass)
      local serializer = VoidSharpNetworking.DataSerializer()
      serializer:Write(T, TClass)
    end
    -- <summary>
    -- </summary>
    ClassFromObj = function (obj)
      System.throw(System.NotImplementedException())
    end
    WriteSingle = function (writer, obj)
      local serializer = VoidSharpNetworking.DataSerializer()
      local type = obj:GetType()

      if System.is(obj, System.String) then
        type = System.typeof(System.String)
      end

      if System.is(obj, System.Int32) then
        type = System.typeof(System.Int32)
      end

      serializer:WriteSingle(writer, type, obj)
    end
    -- <summary>
    -- This sends a RPC to all players or if called clientside sends to the server.
    -- </summary>
    Send = function (methodName, T, TClass)
      net.Start("voidsharp_" .. methodName)
      WriteData(T, TClass)
      if VoidSharp.Realm.IsClient() then
        net.SendToServer()
      else
        net.Broadcast()
      end
    end
    -- <summary>
    -- This sends a RPC to a specific player.
    -- </summary>
    SendToClient = function (target, methodName, T, TClass)
      if VoidSharp.Realm.IsClient() then
        System.throw(System.Exception("Trying to call serverside operation from clientside!!"))
      end

      net.Start("voidsharp_" .. methodName)
      WriteData(T, TClass)
      VoidSharp.Net.Send(target)
    end
    -- <summary>
    -- This sends a RPC to specific players.
    -- </summary>
    SendToClients = function (targets, methodName, T, TClass)
      if VoidSharp.Realm.IsClient() then
        System.throw(System.Exception("Trying to call serverside operation from clientside!!"))
      end

      net.Start("voidsharp_" .. methodName)
      WriteData(T, TClass)
      VoidSharp.Net.Send1(targets)
    end
    return {
      RegisterInstance = RegisterInstance,
      AddNetworkString = AddNetworkString,
      Send = Send,
      SendToClient = SendToClient,
      SendToClients = SendToClients,
      __metadata__ = function (out)
        return {
          methods = {
            { "AddNetworkString", 0x10E, AddNetworkString, System.String },
            { "ClassFromObj", 0x189, ClassFromObj, System.Object, System.Object },
            { "RegisterInstance", 0x10E, RegisterInstance, System.Object },
            { "Send", 0x1020E, Send, function (TClass) return System.String, TClass end },
            { "SendToClient", 0x1030E, SendToClient, function (TClass) return out.VoidSharp.Player, System.String, TClass end },
            { "SendToClients", 0x1030E, SendToClients, function (TClass) return System.Array(out.VoidSharp.Player), System.String, TClass end },
            { "ShouldReadAsSingle", 0x189, ShouldReadAsSingle, System.Type, System.Boolean },
            { "WriteData", 0x10109, WriteData, function (TClass) return TClass end },
            { "WriteSingle", 0x209, WriteSingle, out.VoidSharp.Networking.NetworkWriter, System.Object }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
